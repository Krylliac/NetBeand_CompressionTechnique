/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package menu;
import java.util.PriorityQueue;
import java.text.DecimalFormat;
import java.util.*;
import java.util.ArrayList;
import java.util.Scanner;
/**
 *
 * @author pranes
 */
public class Awal extends javax.swing.JFrame {

    /**
     * Creates new form awal
     */
    public Awal() {
        initComponents();
    }
    
    //class run text length

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        hasil1 = new javax.swing.JTextArea();
        txt1 = new javax.swing.JTextField();
        kompresi = new javax.swing.JButton();
        kompresi1 = new javax.swing.JButton();
        kompresi2 = new javax.swing.JButton();
        kompresi3 = new javax.swing.JButton();
        kompresi4 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        label1 = new java.awt.Label();
        label3 = new java.awt.Label();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        label2 = new java.awt.Label();
        label4 = new java.awt.Label();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 153, 0));
        setFocusable(false);
        setForeground(new java.awt.Color(255, 153, 0));
        setType(java.awt.Window.Type.POPUP);

        hasil1.setColumns(20);
        hasil1.setRows(5);
        jScrollPane1.setViewportView(hasil1);

        kompresi.setBackground(new java.awt.Color(51, 153, 255));
        kompresi.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        kompresi.setForeground(new java.awt.Color(255, 255, 255));
        kompresi.setText("Kompresi RunLenght");
        kompresi.setToolTipText("");
        kompresi.setAlignmentX(5.0F);
        kompresi.setAlignmentY(5.0F);
        kompresi.setBorderPainted(false);
        kompresi.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        kompresi.setIconTextGap(5);
        kompresi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kompresiActionPerformed(evt);
            }
        });

        kompresi1.setBackground(new java.awt.Color(51, 153, 255));
        kompresi1.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        kompresi1.setForeground(new java.awt.Color(255, 255, 255));
        kompresi1.setText("Kompresi Huffman");
        kompresi1.setToolTipText("");
        kompresi1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        kompresi1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kompresi1ActionPerformed(evt);
            }
        });

        kompresi2.setBackground(new java.awt.Color(51, 153, 255));
        kompresi2.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        kompresi2.setForeground(new java.awt.Color(255, 255, 255));
        kompresi2.setText("Kompresi Shannon-Fano");
        kompresi2.setToolTipText("");
        kompresi2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        kompresi2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kompresi2ActionPerformed(evt);
            }
        });

        kompresi3.setBackground(new java.awt.Color(51, 153, 255));
        kompresi3.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        kompresi3.setForeground(new java.awt.Color(255, 255, 255));
        kompresi3.setText("Kompresi LZW");
        kompresi3.setToolTipText("");
        kompresi3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        kompresi3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kompresi3ActionPerformed(evt);
            }
        });

        kompresi4.setBackground(new java.awt.Color(51, 153, 255));
        kompresi4.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        kompresi4.setForeground(new java.awt.Color(255, 255, 255));
        kompresi4.setText("Kompresi MTF");
        kompresi4.setToolTipText("");
        kompresi4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        kompresi4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kompresi4ActionPerformed(evt);
            }
        });

        jPanel1.setAutoscrolls(true);
        jPanel1.setFocusCycleRoot(true);
        jPanel1.setInheritsPopupMenu(true);

        label1.setFont(new java.awt.Font("Comic Sans MS", 0, 36)); // NOI18N
        label1.setText("TEKNIK KOMPRESI");

        label3.setFont(new java.awt.Font("Comic Sans MS", 2, 18)); // NOI18N
        label3.setText("PRANESTYA GAUNG WICAKSONO : 201751101");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 9, Short.MAX_VALUE))
        );

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/menu/user.png"))); // NOI18N
        jLabel1.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/menu/user.png"))); // NOI18N
        jLabel1.setMaximumSize(new java.awt.Dimension(160, 160));
        jLabel1.setMinimumSize(new java.awt.Dimension(160, 160));
        jLabel1.setPreferredSize(new java.awt.Dimension(160, 160));

        jPanel2.setAutoscrolls(true);
        jPanel2.setFocusCycleRoot(true);
        jPanel2.setInheritsPopupMenu(true);

        label2.setFont(new java.awt.Font("Comic Sans MS", 0, 36)); // NOI18N
        label2.setForeground(new java.awt.Color(0, 0, 0));
        label2.setText("MACAM KOMPRESI");

        label4.setFont(new java.awt.Font("Comic Sans MS", 2, 18)); // NOI18N
        label4.setForeground(new java.awt.Color(0, 0, 0));
        label4.setText("RLC ~ Huffman ~ Shannon-Fanno ~ LZW ~ MTF");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 11, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(kompresi1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(kompresi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(kompresi2, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                            .addComponent(kompresi3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(kompresi4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt1)
                            .addComponent(jScrollPane1)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(19, 19, 19))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kompresi, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(kompresi1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(kompresi2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(kompresi3, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(kompresi4, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
 

// ==========================runLength======================================
 public  String encode(String source) {
        StringBuffer dest = new StringBuffer();
        for (int i = 0; i < source.length(); i++) {
            int runLength = 1;
            while (i+1 < source.length() && source.charAt(i) == source.charAt(i+1)) {
                runLength++;
                i++;
            }
            dest.append("@");
            dest.append(source.charAt(i));
            dest.append(runLength);
        }
        return dest.toString();
    }
 //===========================Hufffman======================================
 //huffmanleaf
 class HuffmanLeaf extends HuffmanTree {
    
    public final char value;
    
    public HuffmanLeaf(int freq, char val) {
        super(freq);
        value = val;
    }
    
}
//huffmannode
 class HuffmanNode extends HuffmanTree {
    
    public final HuffmanTree right; // subtrees
    public final HuffmanTree left; // subtrees
    
    public HuffmanNode(HuffmanTree l, HuffmanTree r) {
        super(l.frequency + r.frequency);
        left = l;
        right = r;
    }
}
 //huffman
  public HuffmanTree builTree(int[] charFreqs) {
        PriorityQueue<HuffmanTree> trees = new PriorityQueue<HuffmanTree>();
        
        for (int i = 0; i < charFreqs.length; i++) {
            if (charFreqs[i] > 0) {
                trees.offer(new HuffmanLeaf(charFreqs[i], (char) i));
            }
        }
        
        assert trees.size() > 0;
        
        while (trees.size() > 1) {
            HuffmanTree a = trees.poll();
            HuffmanTree b = trees.poll();
            
            trees.offer(new HuffmanNode(a, b));
        }
        return trees.poll();
    }
    
 public void printCodes(HuffmanTree tree, StringBuffer prefix) {
        assert tree != null;
        if (tree instanceof HuffmanLeaf) {
            HuffmanLeaf leaf = (HuffmanLeaf) tree;
            hasil1.append(leaf.value + "\t"+"\t" + leaf.frequency + "\t"+"\t" + prefix +"\n");
        } else if (tree instanceof HuffmanNode) {
            HuffmanNode node = (HuffmanNode) tree;
            
            prefix.append('0');
            printCodes(node.left, prefix);
            prefix.deleteCharAt(prefix.length() - 1);
            
            prefix.append('1');
            printCodes(node.right, prefix);
            prefix.deleteCharAt(prefix.length() - 1);
        }
    }
 //==========================Shannon-fano-==================================
 //symbol
 class Symbol {

    public final char symbol;
    public StringBuilder code;
    public double p;
    public int count;

    public Symbol(char s, int count) {
        symbol = s;
        this.p = p;
        this.count = count;
        code = new StringBuilder();
    }

    int getL() {
        if( code == null )
            return -1;

        return code.length();
    }

    void setProbability(int total) {
        p = count/(double)total;
    }

    @Override
    public boolean equals(Object o) {
        if( o instanceof Symbol ) {
            Symbol s = (Symbol) o;
            return s.symbol == symbol;
        }

        return false;
    }
}
 //counter
 class Counter {

    private ArrayList<Symbol> list;
    public final int total;
    public double avg_l;

    public Counter(String text) {

        list = new ArrayList<>();


        int i;
        for (i=0; i<text.length(); i++) {
            if( list.contains(new Symbol(text.charAt(i), -1)) )
                continue;

            String c;
            if( text.charAt(i) == '.' )
                c  = "\\.";
            else
                c  = ""+text.charAt(i);

            String replaced = text.replaceAll(c, "");
            list.add(new Symbol(text.charAt(i), text.length()-replaced.length()));
        }

        total = i;
        for(Symbol s: list)
            s.setProbability(total);

        list.sort(new Comparator<Symbol>() {
            @Override
            public int compare(Symbol o1, Symbol o2) {
                if( o1.p < o2.p ) return 1;
                if( o1.p == o2.p ) return 0;
                return -1;
            }
        });

        fanon(0, list.size()-1);

        avg_l = 0.0;
        for(i=0; i<list.size(); i++)
            avg_l += list.get(i).getL() * list.get(i).p;
    }

    private void fanon(int start, int end) {
        if( start == end || start > end || end < start)
            return;

        int cut = start;
        double ratio1 = getRatio(start, end, cut);
        double ratio2 = getRatio(start, end, cut+1);

        while( Math.abs(ratio1-1) > Math.abs(ratio2-1) && cut < end ) {
            cut++;
            ratio1 = getRatio(start, end, cut);
            ratio2 = getRatio(start, end, cut+1);
        }

        applySubcode('0', start, cut);
        applySubcode('1', cut+1, end);

        fanon(start, cut);
        fanon(cut+1, end);
    }

    private void applySubcode(char sc, int from, int to) {
        for(int i=from; i<=to; i++) {
            list.get(i).code.append(sc);
        }
    }

    /**
     * cut is included in the left group
     * @param from
     * @param to
     * @param cut
     * @return
     */
    private double getRatio(int from, int to, int cut) {
        if(from > to || cut < from || cut > to )
            throw new IllegalArgumentException("Illegal parameter set. from <= cut <= to.. \n "+from+"<="+cut+"<="+to+" does not apply");
        double sumLeft = getSum(from, cut);
        double sumRight = getSum(cut+1, to);
        return sumLeft/sumRight;
    }

    private double getSum(int from, int to) {
        double sum = 0;
        for(int i=from; i<=to; i++) {
            sum += list.get(i).p;
        }

        return sum;
    }

    public String toString() {

        StringBuilder sb = new StringBuilder();
        DecimalFormat df = new DecimalFormat("#.##");

        outputConsole(sb, df);

        sb.append("\n");

//        sb.append("Rata2 panjang = "+df.format(avg_l)+" Bits/Symbol \n");

        return sb.toString();
    }

    private void outputLaTex(StringBuilder sb, DecimalFormat df) {
        sb.append("Printing LaTex table version: \n\n");
        sb.append("Zeichen & $p_i$ & $n$ & Codewort \\\\");

        for(int i=0; i<list.size(); i++) {
            Symbol s = list.get(i);
            sb.append(s.symbol+" & "+df.format(s.p)+" & "+s.count+" & "+s.code+"\\\\\n");
        }
    }

    private void outputConsole(StringBuilder sb, DecimalFormat df) {
//        sb.append("Printing console table version: \n\n");
        Formatter f = new Formatter(sb, Locale.ENGLISH);

        hasil1.setText("SYMBOL  =============  WEIGHT  ============  SHANNON-FANNO CODE\n");
        
        for(int i=0; i<list.size(); i++) {
            Symbol s = list.get(i);
//            f.format("%2s => %4s %4d %15s \n", s.symbol, df.format(s.p), s.count, s.code);
            f.format("%2s %55s %59s \n", s.symbol, s.count, s.code);
        }
    }

}
 //===========================LZW dictionary================================
 
 ArrayList<String> table = new ArrayList<>();
 ArrayList<Integer> code = new ArrayList<>();
	
	public void encoding(char[] s) 
	{
		/* Initialize Starting Table */
		table.add(Character.toString(s[0]));
		
		for(int i=1; i<s.length; i++)
		{
			String toBeCompared = Character.toString(s[i]);
			if( !table.contains(toBeCompared)) table.add(toBeCompared); 
		}
		
		/* ENCODING */
		int i=0;
		while(i<s.length)
		{
			StringBuilder sb = new StringBuilder();
			if(i+1<s.length)
			{
				// Add new letter to the current letter
				sb.append(charToStr(s[i])).append(charToStr(s[++i]));
				
				/*
				 *	If the new combination is not in the table:
				 * 	1) Code the new combination of letters
				 * 	2) Add the new combination of letters to the table
				*/
				if( !table.contains(sb.toString())) 
				{
					code.add(table.indexOf(charToStr(s[i-1]))+1);
					table.add(sb.toString());
				}
				/*
				 * If the combination ( sb ) exists in the table:
				 * 	- Add new letter to the combination
				 * 	- Continue checking if the combination exists
				 * 	until you find new combination or you get to the end
				 */
				else
				{
					String temp = "";
					while(table.contains(sb.toString()))
					{
						temp = sb.toString();
						i++;
						if(i<s.length)sb.append(charToStr(s[i]));
						else break;
					}
					
					code.add(table.indexOf(temp)+1);
					if( !table.contains(sb.toString()))
					{
						table.add(sb.toString());
					}
							
				}
				
			}
			else break;
			
		}
		/* ENCODING END */
	}

	/* Convert char to String */
	public String charToStr(char c)
	{
		return Character.toString(c);
	}
//===========================MTF Compression================================
        
        public List<Integer> encode(String msg, String symTable){
		List<Integer> output = new LinkedList<Integer>();
		StringBuilder s = new StringBuilder(symTable);
		
		for(char c : msg.toCharArray()){
			int idx = s.indexOf("" + c);
			output.add(idx);
			s = s.deleteCharAt(idx).insert(0, c);
		}
		return output;
	}
 
 
	private void test(String toEncode, String symTable){
		List<Integer> encoded = encode(toEncode, symTable);
		hasil1.append(toEncode + ": " + encoded);
	}
 
 //button
    private void kompresiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kompresiActionPerformed
        // TODO add your handling code here:
         String Runlenght = String.valueOf(txt1.getText());
         //kompresi ke run length
         hasil1.setText (encode(Runlenght));
    }//GEN-LAST:event_kompresiActionPerformed

    private void kompresi1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kompresi1ActionPerformed
        // TODO add your handling code here:
        hasil1.setText("");
        String huffman = String.valueOf(txt1.getText());
        int[] charFreqs = new int[256];
        
        for (char c : huffman.toCharArray()) {
            charFreqs[c] = charFreqs[c] + 1;
        }
        
        HuffmanTree tree = builTree(charFreqs);
        hasil1.append("SYMBOL  =============  WEIGHT  ============  HUFFMAN CODE\n");
        printCodes(tree, new StringBuffer());
        
    }//GEN-LAST:event_kompresi1ActionPerformed

    private void kompresi2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kompresi2ActionPerformed
        // TODO add your handling code here:
        hasil1.setText("");
        String shannon = String.valueOf(txt1.getText());
        Counter c = new Counter (shannon);
        hasil1.append(String.valueOf(c));
    }//GEN-LAST:event_kompresi2ActionPerformed

    private void kompresi3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kompresi3ActionPerformed
        // TODO add your handling code here:
        /* Input Sequence for coding */
        hasil1.setText("");
	String lzw = String.valueOf(txt1.getText());
	char[] sequence = lzw.toCharArray(); 
	/* END OF INPUT */
		
	encoding(sequence);			
		
	hasil1.setText("Encoded sequnce: ");
	for(Integer c : code) hasil1.append(c+" ");
        hasil1.append("\n"+"Tabel : "+"\n");
	for(String s : table) hasil1.append(table.indexOf(s)+1 + ": " + s+"\n");
	/* Calculating compression percent */
        double ratio = ((double)sequence.length - (double)code.size())/(double)sequence.length;
        hasil1.append("\n" + "Compression : " + (float)ratio*100 + " %");
    }//GEN-LAST:event_kompresi3ActionPerformed

    private void kompresi4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kompresi4ActionPerformed
        // TODO add your handling code here:
                hasil1.setText("");
                String symTable = "";//abcdefghijklmnopqrstuvwxyz
		char characters [] = new char[256];
		for(int i=0; i< characters.length; i++){
			characters[i]+=i;
			symTable=symTable+characters[i];
			}
                String mtf = String.valueOf(txt1.getText());
		test(mtf, symTable);
    }//GEN-LAST:event_kompresi4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Awal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Awal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Awal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Awal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Awal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea hasil1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton kompresi;
    private javax.swing.JButton kompresi1;
    private javax.swing.JButton kompresi2;
    private javax.swing.JButton kompresi3;
    private javax.swing.JButton kompresi4;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private java.awt.Label label4;
    private javax.swing.JTextField txt1;
    // End of variables declaration//GEN-END:variables
}
